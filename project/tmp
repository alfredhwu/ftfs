        switch($eventargs[1]) {
            case 'serviceticket':
                $service_ticket = $this->getSubject('serviceticket', $eventlog->getAction());
                $action = $eventlog->getAction();
                if(array_key_exists('change_set', $action)) {
                    $change_set = $action['change_set'];
                }else{
                    $change_set = null;
                }
                if(array_key_exists('attachment_name', $action)) {
                    $attachment_name = $action['attachment_name'];
                }else{
                    $attachment_name = null;
                }
                if(array_key_exists('observation', $action)) {
                    $observation = $action['observation'];
                }else{
                    $observation = null;
                }
                if(array_key_exists('observation_to', $action)) {
                    $observation_to = $action['observation_to'];
                }else{
                    $observation_to = null;
                }
                // set destinaire **************
                $notificationlog->setNotifiedTo($notified_to);
                if($method->getName() === 'email') {
                    // editing cc field
                    // check if $service_ticket or $action has a cc 
                    $notificationlog->setCc(null);
                }
                /*
                $message = $this->translator->trans($eventlog->getEvent()->getEventKey().'.action.'.$method->getName().'.'.$format, array(
                    '%service_ticket%' => $service_ticket->getName(),
                    '%visited_by%' => $eventlog->getActor(),
                    '%visited_at%' => $eventlog->getActedAt()->format('Y-m-d H:i:s'),
                    '%change_set%' => $change_set,
                ), 'notification');
                 */
                $message = $this->templating
                    ->render('FTFSNotificationBundle:Message:message_service_ticket.'.$format.'.twig', array(
                    'method' => $method->getName(),
                    'action' => $eventlog->getEvent()->getEventKey(),
                    'notified_to' => $notified_to,
                    'service_ticket' => $service_ticket->getName(),
                    'visited_by' => $eventlog->getActor(),
                    'visited_at' => $eventlog->getActedAt()->format('Y-m-d H:i:s'),
                    'change_set' => $change_set,
                    'attachment_name' => $attachment_name,
                    'observation' => $observation,
                    'observation_to' => $observation_to,
                ));
                throw new \Exception($message); // Todo Debugging >>>
                break;
            default:
                $message = $this->translator->trans($eventlog->getEvent()->getEventKey().'.action.default.txt', array(
                    '%event_key%' => $eventlog->getEvent()->getEventKey(),
                    '%acted_by%' => $eventlog->getActor(),
                    '%acted_at%' => $eventlog->getActedAt()->format('Y-m-d H:i:s'),
                ), 'notification');
        }
